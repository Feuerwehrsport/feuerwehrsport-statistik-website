#= require classes/EventHandler

autoGeneratedFormRowId = 0

class @FssFormRow extends EventHandler
  constructor: (@fields...) ->
    @classes = []
    super
  
  focus: () -> false

  addClass: (className) ->
    @classes.push(className)
    @

  appendData: (data) => data

  content: () =>
    container = $('<div/>').addClass('fss-form-row')
    for className in @classes
      container.addClass(className)
    container.append(field) for field in @fields
    container

class @FssFormRowFile extends FssFormRow
  constructor: (@name, label, @defaultValue = false) ->
    @files = null
    @field = $('<input/>')
      .attr('type', 'file')
      .on('change', (event) =>
         @files = event.target.files
      )
    super(@field)

  appendData: (data) =>
    return data if !@files or @files.length is 0
    data = new FormData()
    data.append(i, file) for file, i in @files
    data

class @FssFormRowCheckbox extends FssFormRow
  constructor: (@name, label, @defaultValue = false) ->
    @field = $('<input/>')
      .attr('type', 'checkbox')

    @field.attr('checked', true) if @defaultValue

    @label = $('<label/>')
      .addClass('checkbox-label')
      .append(@field)
      .append($('<span/>').text(label))
    super(@label)

  appendData: (data) =>
    data[@name] = @field.is(':checked')
    data

class @FssFormRowDescription extends FssFormRow
  constructor: (description) ->
    super($('<p/>').html(description.replace(/\n/, "<br/>")))
    @addClass('description')

class FssFormRowLabelField extends FssFormRow
  constructor: (label, @field) ->
    rowId = autoGeneratedFormRowId++
    @field.attr('id', "fss-form-row-#{rowId}")

    @label = $('<label/>')
      .addClass('text-label')
      .text(label)
      .attr('for', "fss-form-row-#{rowId}")
    super(@label, @field)

  focus: () =>
    @field.focus()
    true

  appendData: (data) =>
    data[@name] = @field.val()
    data

class @FssFormRowText extends FssFormRowLabelField
  constructor: (@name, label, @defaultValue = "") ->
    super(label, $('<input/>').val(@defaultValue))

class @FssFormRowTextarea extends FssFormRowLabelField
  constructor: (@name, label, @defaultValue = "") ->
    super(label, $('<textarea/>').val(@defaultValue))

class @FssFormRowHtml extends FssFormRowTextarea
  constructor: (args...) ->
    super(args...)
    @on 'after-add', (fssWindow) =>
      fssWindow.on 'after-open', () =>
        @field.htmlarea()

class @FssFormRowSelect extends FssFormRowLabelField
  constructor: (@name, label, @defaultValue = "", options = []) ->
    select = $('<select/>')
    for option in options
      select.append($('<option/>').text(option.display).attr('value', option.value))
    select.val(@defaultValue) if @defaultValue
    super(label, select)

class @FssFormRowRadio extends FssFormRowLabelField
  constructor: (@name, label, @defaultValue = "", options = []) ->
    @div = $('<div/>').addClass('field-box')
    for option in options
      radio = $('<input/>').attr('type', 'radio').attr('name', @name).attr('value', option.value)
      radio.attr('checked', 'checked') if option.value is @defaultValue
      text = $('<span/>').html(option.display)
      innerLabel = $('<label/>').addClass('checkbox-label').append(radio).append(text)
      @div.append(innerLabel).append($('<br/>'))
    super(label, @div)

  focus: () =>
    @div.find('input:nth(0)').focus()
    true

  appendData: (data) =>
    data[@name] = @div.find('input:checked').val()
    data

class @FssFormRowDate extends FssFormRowLabelField
  constructor: (@name, label, defaultDate = "") ->
    d = new Date()
    defaultValues = 
      year: d.getFullYear().toString()
      month: @twoDigits(d.getMonth()+1)
      day: @twoDigits(d.getDate())

    result = defaultDate.match(/^(\d{4})-(\d{2})-(\d{2})$/)
    if result
      defaultValues = $.extend defaultValues,
        year: result[1]
        month: result[2]
        day: result[3]

    @day = $('<select/>')
    for val in [1..31]
      @day.append($('<option/>').text(@twoDigits(val)))
    @day.val(defaultValues.day)

    @month = $('<select/>')
    for val in [1..12]
      @month.append($('<option/>').text(@twoDigits(val)))
    @month.val(defaultValues.month)

    @year = $('<select/>')
    for val in [d.getFullYear()-30..d.getFullYear()+10]
      @year.append($('<option/>').text(val))
    @year.val(defaultValues.year)

    div = $('<div/>').addClass('field-box').append(@day).append(@month).append(@year)
    super(label, div)

  twoDigits: (input) ->
    input = input.toString()
    if input[1]? then input else "0#{input[0]}"

  focus: () =>
    @day.focus()
    true

  appendData: (data) =>
    data[@name] = "#{@year.val()}-#{@month.val()}-#{@day.val()}"
    data

class @FssFormRowScores extends FssFormRow
  constructor: (@name, people, @scores, @wks) ->
    table = $('<table/>').addClass('score-table')

    tr = $('<tr/>').append($('<td/>'))
    for wk in @wks
      tr.append($('<th/>').text(wk))

    table.append(tr)
    for score, i in @scores
      @scores[i].selects = []
      tr = $('<tr/>').append($('<th/>').text(score.timeHuman))

      for wk, c in @wks
        select = $('<select/>')
        option = $('<option/>').val("NULL").text(' ---- ').appendTo(select)
        option.attr('selected', 'selected') if score["person_#{c + 1}"] is null
        found = false

        for person in people
          option = $('<option/>').val(person.id).text(person.last_name + ', ' + person.first_name).appendTo(select)
          if person.id is score["person_#{c + 1}"]
            option.attr('selected', 'selected')
            found = true

        throw "not-found" if score["person_#{c + 1}"] isnt null and !found
        $('<td/>').append(select).appendTo(tr)
        @scores[i].selects[c] = select
        table.append(tr)

      if i > 0
        tr = $('<tr/>').append($('<td/>'))
        for wk, c in @wks
          ((selectTop, selectBottom) ->
            $('<td/>').addClass('text-center').append(
              $('<button/>').text('â†§').click (ev) ->
                ev.preventDefault()
                selectBottom.val(selectTop.val())
            ).appendTo(tr)
          )(@scores[i-1].selects[c], score.selects[c])
          tr.insertAfter(@scores[i-1].selects[0].closest('tr'))

    super(table)

  focus: () =>
    @scores[0].selects[0].focus()
    true

  appendData: (data) =>
    returnScores = []
    for score, i in @scores
      returnScores[i] = id: score.id
      for wk, c in @wks
        returnScores[i]["person_#{c+1}"] = score.selects[c].val()
    data.scores = returnScores
    data